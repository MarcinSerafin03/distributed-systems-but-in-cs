# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `DynamicInvocation.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module DynamicInvocation
_M_DynamicInvocation = Ice.openModule('DynamicInvocation')
__name__ = 'DynamicInvocation'

if 'NonTrivialStruct' not in _M_DynamicInvocation.__dict__:
    _M_DynamicInvocation.NonTrivialStruct = Ice.createTempClass()
    class NonTrivialStruct(object):
        def __init__(self, id=0, name=''):
            self.id = id
            self.name = name

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.id)
            _h = 5 * _h + Ice.getHash(self.name)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_DynamicInvocation.NonTrivialStruct):
                return NotImplemented
            else:
                if self.id is None or other.id is None:
                    if self.id != other.id:
                        return (-1 if self.id is None else 1)
                else:
                    if self.id < other.id:
                        return -1
                    elif self.id > other.id:
                        return 1
                if self.name is None or other.name is None:
                    if self.name != other.name:
                        return (-1 if self.name is None else 1)
                else:
                    if self.name < other.name:
                        return -1
                    elif self.name > other.name:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_DynamicInvocation._t_NonTrivialStruct)

        __repr__ = __str__

    _M_DynamicInvocation._t_NonTrivialStruct = IcePy.defineStruct('::DynamicInvocation::NonTrivialStruct', NonTrivialStruct, (), (
        ('id', (), IcePy._t_int),
        ('name', (), IcePy._t_string)
    ))

    _M_DynamicInvocation.NonTrivialStruct = NonTrivialStruct
    del NonTrivialStruct

if '_t_NonTrivialStructSeq' not in _M_DynamicInvocation.__dict__:
    _M_DynamicInvocation._t_NonTrivialStructSeq = IcePy.defineSequence('::DynamicInvocation::NonTrivialStructSeq', (), _M_DynamicInvocation._t_NonTrivialStruct)

_M_DynamicInvocation._t_MoreTrivialService = IcePy.defineValue('::DynamicInvocation::MoreTrivialService', Ice.Value, -1, (), False, True, None, ())

if 'MoreTrivialServicePrx' not in _M_DynamicInvocation.__dict__:
    _M_DynamicInvocation.MoreTrivialServicePrx = Ice.createTempClass()
    class MoreTrivialServicePrx(Ice.ObjectPrx):

        def add(self, a, b, context=None):
            return _M_DynamicInvocation.MoreTrivialService._op_add.invoke(self, ((a, b), context))

        def addAsync(self, a, b, context=None):
            return _M_DynamicInvocation.MoreTrivialService._op_add.invokeAsync(self, ((a, b), context))

        def begin_add(self, a, b, _response=None, _ex=None, _sent=None, context=None):
            return _M_DynamicInvocation.MoreTrivialService._op_add.begin(self, ((a, b), _response, _ex, _sent, context))

        def end_add(self, _r):
            return _M_DynamicInvocation.MoreTrivialService._op_add.end(self, _r)

        def concat(self, a, b, context=None):
            return _M_DynamicInvocation.MoreTrivialService._op_concat.invoke(self, ((a, b), context))

        def concatAsync(self, a, b, context=None):
            return _M_DynamicInvocation.MoreTrivialService._op_concat.invokeAsync(self, ((a, b), context))

        def begin_concat(self, a, b, _response=None, _ex=None, _sent=None, context=None):
            return _M_DynamicInvocation.MoreTrivialService._op_concat.begin(self, ((a, b), _response, _ex, _sent, context))

        def end_concat(self, _r):
            return _M_DynamicInvocation.MoreTrivialService._op_concat.end(self, _r)

        def processList(self, list, context=None):
            return _M_DynamicInvocation.MoreTrivialService._op_processList.invoke(self, ((list, ), context))

        def processListAsync(self, list, context=None):
            return _M_DynamicInvocation.MoreTrivialService._op_processList.invokeAsync(self, ((list, ), context))

        def begin_processList(self, list, _response=None, _ex=None, _sent=None, context=None):
            return _M_DynamicInvocation.MoreTrivialService._op_processList.begin(self, ((list, ), _response, _ex, _sent, context))

        def end_processList(self, _r):
            return _M_DynamicInvocation.MoreTrivialService._op_processList.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_DynamicInvocation.MoreTrivialServicePrx.ice_checkedCast(proxy, '::DynamicInvocation::MoreTrivialService', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_DynamicInvocation.MoreTrivialServicePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::DynamicInvocation::MoreTrivialService'
    _M_DynamicInvocation._t_MoreTrivialServicePrx = IcePy.defineProxy('::DynamicInvocation::MoreTrivialService', MoreTrivialServicePrx)

    _M_DynamicInvocation.MoreTrivialServicePrx = MoreTrivialServicePrx
    del MoreTrivialServicePrx

    _M_DynamicInvocation.MoreTrivialService = Ice.createTempClass()
    class MoreTrivialService(Ice.Object):

        def ice_ids(self, current=None):
            return ('::DynamicInvocation::MoreTrivialService', '::Ice::Object')

        def ice_id(self, current=None):
            return '::DynamicInvocation::MoreTrivialService'

        @staticmethod
        def ice_staticId():
            return '::DynamicInvocation::MoreTrivialService'

        def add(self, a, b, current=None):
            raise NotImplementedError("servant method 'add' not implemented")

        def concat(self, a, b, current=None):
            raise NotImplementedError("servant method 'concat' not implemented")

        def processList(self, list, current=None):
            raise NotImplementedError("servant method 'processList' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_DynamicInvocation._t_MoreTrivialServiceDisp)

        __repr__ = __str__

    _M_DynamicInvocation._t_MoreTrivialServiceDisp = IcePy.defineClass('::DynamicInvocation::MoreTrivialService', MoreTrivialService, (), None, ())
    MoreTrivialService._ice_type = _M_DynamicInvocation._t_MoreTrivialServiceDisp

    MoreTrivialService._op_add = IcePy.Operation('add', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), IcePy._t_int, False, 0), ())
    MoreTrivialService._op_concat = IcePy.Operation('concat', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_string, False, 0), ())
    MoreTrivialService._op_processList = IcePy.Operation('processList', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_DynamicInvocation._t_NonTrivialStructSeq, False, 0),), (), ((), IcePy._t_int, False, 0), ())

    _M_DynamicInvocation.MoreTrivialService = MoreTrivialService
    del MoreTrivialService

# End of module DynamicInvocation
